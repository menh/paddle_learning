
单例模式
https://www.cnblogs.com/zhaoyan001/p/6365064.html
https://www.cnblogs.com/cxjchen/p/3148582.html
http://www.cnblogs.com/qicosmos/p/3145019.html
https://blog.csdn.net/a342374071/article/details/18270643/
定义
单例对象的类只能允许一个实例存在

用处
许多时候整个系统只需要拥有一个的全局对象，这样有利于我们协调系统整体的行为。
比如在某个服务器程序中，该服务器的配置信息存放在一个文件中，这些配置数据由一个单例对象统一读取，
然后服务进程中的其他对象再通过这个单例对象获取这些配置信息。这种方式简化了在复杂环境下的配置管理。

基本实现思路

单例模式要求类能够有返回对象一个引用(永远是同一个)和一个获得该实例的方法（必须是静态方法，通常使用getInstance这个名称）

单例的实现主要是通过以下两个步骤：
1. 将该类的构造方法定义为私有方法，这样其他处的代码就无法通过调用该类的构造方法来实例化该类的对象，只有通过该类提供的静态方法来得到该类的唯一实例；
2. 在该类内提供一个静态方法，当我们调用这个方法时，如果类持有的引用不为空就返回这个引用，如果类保持的引用为空就创建该类的实例并将实例的引用赋予该类保持的引用。

注意事项
单例模式在多线程的应用场合下必须小心使用。如果当唯一实例尚未创建时，有两个线程同时调用创建方法，那么它们同时没有检测到唯一实例的存在，从而同时各自创建了一个实例，这样就有两个实例被构造出来，从而违反了单例模式中实例唯一的原则。 解决这个问题的办法是为指示类是否已经实例化的变量提供一个互斥锁(虽然这样会降低效率)。


责任链模式
https://www.cnblogs.com/lizo/p/7503862.html
https://www.cnblogs.com/lang5230/p/5328166.html


过滤器模式
https://blog.csdn.net/qq_36258792/article/details/73882019

发布订阅模式
https://blog.csdn.net/u011040361/article/details/45308855

代理模式
https://www.cnblogs.com/wrbxdj/p/5267370.html

工厂模式
